version: "3.1"

networks:
  express:
  adapter:
  kong-net:
  localprom:
    driver: bridge
  monitoring:
  agent_network:
    driver: overlay
    # attachable: true

services:
  mongodb:
    image: mongo:latest
    hostname: mongodb
    restart: always
    container_name: mongo
    command: --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-root}
      MONGO_INITDB_DATABASE: admin
      MONGO_SCHOOL_USERNAME: school
      MONGO_SCHOOL_PASSWORD: ${MONGO_SCHOOL_PASSWORD:-schoolpassword}
    ports:
      - 27017:27017 
    volumes:
      - ./database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./database/data:/data/db
    networks:
      - express
      - adapter
      - kong-net
  mongo-express:
    image: mongo-express:latest
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-root}
    networks:
      - express
      - monitoring
  database-adapter:
    image: irinanita/adapter-arm64:latest
    container_name: adapter
    hostname: adapter
    depends_on:
      - mongodb
    links:
      - mongodb
    ports:
      - 3000:3000
    networks:
      - adapter
      - kong-net
      - monitoring
  kong:
    image: kong:latest
    volumes:
      - ./kong:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 80:8000
      - 443:8443
      - 8001:8001
      - 8444:8444
    deploy:
      placement:
          constraints: [node.role == manager]
    networks:
      - kong-net
      - monitoring
  prometheus:
    image: prom/prometheus
    volumes:
        - ./prometheus/prometheus-nexporter-cadvisor-testapp.yml:/etc/prometheus/prometheus.yml
    ports:
        - 9090:9090
    networks:
        - monitoring
  node_exporter:
    image: prom/node-exporter
    deploy:
        mode: global
    volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
    command:
        - '--path.procfs=/host/proc'
        - '--path.rootfs=/rootfs'
        - '--path.sysfs=/host/sys'
        - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
        - 9100:9100
    networks:
        - monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    deploy:
        mode: global
    volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:ro
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
        - /dev/disk:/dev/disk/:ro
    ports:
        - 8080:8080
    networks:
        - monitoring
  agent:
    image: portainer/agent:2.11.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]
  portainer:
    image: portainer/portainer-ce:2.11.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9443:9443"
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

volumes:
  portainer_data:
