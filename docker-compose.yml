version: "3.1"

networks:
  express:
  adapter:
  kong-net:
  localprom:
    driver: bridge
  monitoring:
  agent_network:
    driver: overlay

services:
  # *************** Mongo Database ***************
  mongodb:
    image: mongo:latest
    hostname: mongo
    restart: always
    command: --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-root}
      MONGO_INITDB_DATABASE: admin
      MONGO_SCHOOL_USERNAME: school
      MONGO_SCHOOL_PASSWORD: ${MONGO_SCHOOL_PASSWORD:-schoolpassword}
    ports:
      - 27017:27017
    volumes:
      - ./database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongo-vol:/data/db
    networks:
      - express
      - adapter
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
  # *************** Mongo Express ***************
  mongo-express:
    image: mongo-express:latest
    hostname: express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-root}
    networks:
      - express
  # *************** IO Adapter *****************
  database-adapter:
    image: irinanita/adapter-amd64:latest
    hostname: adapter
    depends_on:
      - mongodb
    links:
      - mongodb
    networks:
      - adapter
      - kong-net
  # *************** Kong API Gateway ***************
  kong:
    image: kong:latest
    hostname: kong
    volumes:
      - ./kong:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      # KONG_STATUS_LISTEN: 0.0.0.0:8100 ssl
    ports:
      - 8084:8000
      - 443:8443
      - 8001:8001
      # - 8100:8100
      - 8444:8444
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - kong-net
      - monitoring
  # *************** Prometheus Monitoring ***************
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - monitoring
      - agent_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3100:3000"
    networks:
      - monitoring
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      # restart_policy:
      #   condition: on-failure
  # *************** Node Exporter Monitoring ***************
  node_exporter:
    image: prom/node-exporter
    deploy:
      mode: global
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - 9100:9100
    networks:
      - monitoring
  # *************** Portainer Agent ***************
  agent:
    image: portainer/agent:2.11.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]
  # *************** Portainer ***************
  portainer:
    image: portainer/portainer-ce:2.11.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9443:9443"
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

volumes:
  portainer_data:
  mongo-vol: {}
